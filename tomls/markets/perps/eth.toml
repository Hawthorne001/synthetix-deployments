include = [
  "../perps-factory.toml",

  # TODO: this is a funny necessary dependency because the oracle manager is registering the same node twice
  # however, it will not emit "NodeRegistered" the second time because its an unnecessary call
  "../../oracles/eth.toml",
  "../common/settlement-strategies/eth/pyth.toml"
]

[setting.ethPerpsMarketId]

[setting.perpsEthSkewScale]

[setting.perpsEthMaxFundingVelocity]

[setting.perpsEthMakerFeeRatio]

[setting.perpsEthTakerFeeRatio]

[setting.perpsEthMaxMarketSize]

[setting.perpsEthInitialMarginRatio]

[setting.perpsEthMaintenanceMarginFraction]

[setting.perpsEthLiquidationRewardRatioD18]

[setting.perpsEthMaxLiquidationLimitAccumulationMultiplier]

[setting.perpsEthMaxSecondsInLiquidationWindow]

[setting.perpsEthMinimumPositionMargin]

[setting.perpsEthLockedOiRatio]

# strategy type for Perps markets is 0, for spot markets is 1
[setting.strategyType]
defaultValue = "0"

[invoke.createEthPerpsMarket]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "createMarket"
args = ["<%= settings.ethPerpsMarketId %>", "Ethereum", "ETH"]
depends = ["provision.perpsFactory"]

[invoke.setPerpsPriceEth]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "updatePriceData"
args = [
  "<%= settings.ethMarketId %>", 
  "<%= extras.eth_oracle_id %>"
]
depends = ["invoke.createEthPerpsMarket", "invoke.registerEthOracleNode"]

[invoke.setPerpsEthSettlementStrategy]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "addSettlementStrategy"
args = [
  "<%= settings.ethMarketId %>", 
  { strategyType = "<%= settings.strategyType %>", settlementDelay = "<%= settings.ethSettlementDelay %>", settlementWindowDuration = "<%= settings.ethSettlementWindowDuration %>", priceWindowDuration = "<%= settings.priceWindowDuration %>", priceVerificationContract = "<%= settings.pythPriceVerificationAddress %>", feedId = "<%= settings.pythEthFeedId %>",  url = "<%= settings.pythFeedUrl %>", settlementReward = "<%= settings.settlementReward %>", priceDeviationTolerance = "<%= parseEther(settings.ethSettlementDeviationTolerance) %>", disabled = false }
]
depends = ["invoke.createEthPerpsMarket"]

[invoke.setPerpsEthFundingParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setFundingParameters"
args = [
  "<%= settings.ethMarketId %>", 
  "<%= parseEther(settings.perpsEthSkewScale) %>",
  "<%= parseEther(settings.perpsEthMaxFundingVelocity) %>"
]
depends = ["invoke.createEthPerpsMarket"]

[invoke.setPerpsEthOrderFees]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setOrderFees"
args = [
  "<%= settings.ethMarketId %>", 
  "<%= parseEther(settings.perpsEthMakerFeeRatio) %>",
  "<%= parseEther(settings.perpsEthTakerFeeRatio) %>"
]
depends = ["invoke.createEthPerpsMarket"]

[invoke.setPerpsEthMaxMarketSize]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxMarketSize"
args = [
  "<%= settings.ethMarketId %>", 
  "<%= parseEther(settings.perpsEthMaxMarketSize) %>"
]
depends = ["invoke.createEthPerpsMarket"]

[invoke.setPerpsEthLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLiquidationParameters"
args = [
  "<%= settings.ethMarketId %>", 
  "<%= parseEther(settings.perpsEthInitialMarginRatio) %>",
  "<%= parseEther(settings.perpsEthMaintenanceMarginFraction) %>",
  "<%= parseEther(settings.perpsEthLiquidationRewardRatioD18) %>",
  "<%= parseEther(settings.perpsEthMaxLiquidationLimitAccumulationMultiplier) %>",
  "<%= parseEther(settings.perpsEthMaxSecondsInLiquidationWindow) %>",
  "<%= parseEther(settings.perpsEthMinimumPositionMargin) %>"
]
depends = ["invoke.createEthPerpsMarket"]

[invoke.setPerpsEthLockedOiRatio]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLockedOiRatio"
args = [
  "<%= settings.ethMarketId %>",
  "<%= parseEther(settings.perpsEthLockedOiRatio) %>"
]
depends = ["invoke.createEthPerpsMarket"]
